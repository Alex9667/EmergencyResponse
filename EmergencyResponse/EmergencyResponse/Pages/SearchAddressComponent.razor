@page "/"
@using EmergencyResponse.DTO
@using EmergencyResponse.ExternalServices
@using EmergencyResponse.ExternalServices.Interfaces
@using EmergencyResponse.Model
@using EmergencyResponse.Controller
@using EmergencyResponse.Services.DataExport;
@using EmergencyResponse.SharedClasses.Mapping;
@inject IDataforsyningService dataforsyningService
@inject IDatafordelerenService dataFordelerenService
@inject IDataExportService dataExportService
@inject IJSRuntime JS

<div class="banner">
    Emergency Response
</div>
<hr class="separator" />
<h3>Søg efter adresse</h3>
<div style="display: flex;">
    @if (validationText != null && validationText != "")
    {
        <div class="popup-container">
            <div class="popup">
                <p style="color:red">@validationText</p>
                <button @onclick="closePopup">Ok</button>
            </div>
        </div>
    }
    <div class="container">
        <div>
            <div class="input-wrapper">
                <form @onsubmit="SearchAddress" class="input">
                    <div>
                        <label for="street">*Vejnavn:</label>
                        <input required placeholder="abc" class="textInput" type="text" id="street" name="street" @bind="searchAddress.StreetName" />
                    </div>
                    <div>
                        <label for="houseNumber">*Husnummer:</label>
                        <input required placeholder="123 abc" class="textInput" type="text" id="houseNumber" name="houseNumber" @bind="searchAddress.HouseNumber" />
                    </div>
                    <div>
                        <label for="postalCode">*Postnummer:</label>
                        <input required placeholder="1234" class="textInput" type="text" id="postalCode" name="postalCode" @bind="searchAddress.PostalCode" />
                    </div>
                    <div>
                        <label for="postalCodeName">By:</label>
                        <input placeholder="abc" class="textInput" type="text" id="postalCodeName" name="postalCodeName" @bind="searchAddress.PostalCodeName" />
                    </div>
                    <div>
                        <label for="floor">Etage:</label>
                        <input placeholder="123" class="textInput" type="text" id="floor" name="floor" @bind="searchAddress.Floor" />
                    </div>
                    <div>
                        <label for="door">Dør:</label>
                        <input placeholder="123" class="textInput" type="text" id="door" name="door" @bind="searchAddress.Door" />
                    </div>
                    <button class="button" id="submit" type="submit">Søg</button>
                </form>
            </div>

            @if(possibleAddresses.Count > 0 && selectedAddress != null)
            {
                <div>
                    <p>Vælg en radius for at indhente <br> nærtliggende addresser</p>
                    <input type="range" min="1" max="20" value="@radius" @oninput="HandleRadiusChange" />
                    <p>Valgt radius: @radius km</p>
                    <button class="btn btn-primary" @onclick="FetchAddresses">Hent</button>
                </div>
            }
        </div>

        @if (possibleAddresses != null && possibleAddresses.Count > 0)
        {
            <div class="table-container" id="tableContainer">
                <table class="table">
                    <thead>
                        <tr>
                            <th>BFE</th>
                            <th>Vejnavn</th>
                            <th>Husnummer</th>
                            <th>Etage</th>
                            <th>Dør</th>
                            <th>Postnummer</th>
                            <th>By</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var address in possibleAddresses)
                        {
                            <tr @onclick="() => SelectAddress(address)">
                                <td>@address.BFE.ToString()</td>
                                <td>@address.StreetName</td>
                                <td>@address.HouseNumber</td>
                                <td>@address.Floor</td>
                                <td>@address.Door</td>
                                <td>@address.PostalCode</td>
                                <td>@address.PostalCodeName</td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if(addressesCounter != null)
                {
                    <div>
                        <label for="languageSelect">Vælg sprog:</label>
                        <select @onchange="HandleLanguageChange" id="languageSelect">
                            <option value="English">English</option>
                            <option value="Danish">Danish</option>
                        </select>
                    <button @onclick="ExportCSV">Export CSV</button>
                    </div>
                }
            </div>
        }
        @if (showAddressNotFoundWarning)
        {
            <div id="NoMatchingAddressWarningLabel" >
                We could not find the address you're looking for.
            </div>
        }
    </div>

</div>

@code {
    private string validationText = "";
    public AddressDTO searchAddress = new AddressDTO();
    public List<AddressDTO> possibleAddresses = new List<AddressDTO>();
    public List<AddressDTO> addressesCounter = new List<AddressDTO>();
    public List<AddressDTO> surroundingAddresses = new List<AddressDTO>();
    public AddressDTO selectedAddress;
    bool showAddressNotFoundWarning = false;
    private OutputLanguage selectedLanguage = OutputLanguage.English;
    private int radius = 10; // Default radius

    public string StreetText = "";

    public async Task SearchAddress()
    {
        /*
        * Validation for user input
        */
        if(searchAddress.StreetName == "" || searchAddress.StreetName.Any(char.IsDigit))
        {
            validationText = "Vejnavnet må ikke være tomt eller indeholde tal";
            return;
        }
        if (searchAddress.PostalCode.Length != 4 || searchAddress.PostalCode.Any(char.IsLetter))
        {
            validationText = "Postnummeret skal bestå af 4 tal";
            return;
        }
        if (searchAddress.PostalCodeName != null && searchAddress.PostalCodeName.Any(char.IsDigit))
        {
            validationText = "Byen må ikke indeholde tal";
            return;
        }
        if (searchAddress.Floor != null && searchAddress.Floor.Any(char.IsLetter))
        {
            validationText = "Etagen må ikke indeholde bogstaver";
            return;
        }
        if (searchAddress.Door != null && searchAddress.Door.Any(char.IsLetter))
        {
            validationText = "Dør må ikke indeholde bogstaver";
            return;
        }
        showAddressNotFoundWarning = false;
        selectedAddress = null;
        var httpClient = new HttpClient();
        AddressController addressController = new AddressController(httpClient);

        possibleAddresses = await dataforsyningService.SearchAddress(searchAddress);

        int addressBFE;
        if(possibleAddresses.Count > 0)
        {
            addressBFE = await addressController.GetAddressBFE($"{possibleAddresses[0].StreetName} {possibleAddresses[0].HouseNumber}");
            foreach (var address in possibleAddresses)
            {
                address.BFE = addressBFE;
            }
        }
        else
        {
            showAddressNotFoundWarning = true;
        }


        /**
         * Udkommenteret da det tager meget lang tid at lave alle de kald for at få bfe nummeret. 
         * Jeg er ikke sikker på om alle BFE'er altid er de samme på hver søgning, så gemmer til senere./
        */
        //foreach (var address in possibleAddresses)
        //{
        //    address.BFE = await addressController.GetAddressBFE($"{address.StreetName} {address.HouseNumber}");
        //}
        // var httpClient = new HttpClient();
        // var addressController = new AddressController(httpClient);
    }
    public async Task SelectAddress(AddressDTO address)
    {
        //Checking if any address is selected so the click event won't do aything in case one is selected
        if(selectedAddress == null)
        {
            selectedAddress = address;
            possibleAddresses.Clear();
            possibleAddresses = await dataFordelerenService.GetAddressesInBuilding(selectedAddress);
            addressesCounter = possibleAddresses;
        }
    }

    private void HandleLanguageChange(ChangeEventArgs e)
    {
        if (Enum.TryParse<OutputLanguage>(e.Value?.ToString(), out var language))
        {
            selectedLanguage = language;
        }
    }

    private async Task ExportCSV()
    {
        List<Address> addressList = new List<Address>();
        foreach (AddressDTO address in possibleAddresses)
        {
            Address add = AddressDTOtoAddressMapper.ToAddress(address);
            addressList.Add(add);
        }
        var csvContent = await dataExportService.ExportAddressesToJson(addressList, selectedLanguage);
        byte[] bytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
        await JS.InvokeVoidAsync("saveAsFile", "Addresses.csv", Convert.ToBase64String(bytes));
    }

    private void closePopup()
    {
        validationText = "";
    }

    private void HandleRadiusChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newRadius))
        {
            radius = newRadius;
        }
    }

    private async Task FetchAddresses()
    {
        Address specificAddress = AddressDTOtoAddressMapper.ToAddress(selectedAddress);

        List<Address> addressList = new List<Address>();
        List<AddressDTO> addressDTOList = new List<AddressDTO>();
        addressList = await dataforsyningService.GetAddressesInCircleAsync(specificAddress, radius);
        foreach (Address address in addressList)
        {
            if(address != null)
            {
                AddressDTO add = AddressDTOtoAddressMapper.ToAddressDTO(address);
                addressDTOList.Add(add);
            }
        }
        possibleAddresses = addressDTOList;
    }




}

<style>
    .list-item {
        list-style-type: none; /* Remove bullet points */
        padding: 10px; /* Add padding */
        cursor: pointer; /* Change cursor to pointer on hover */
    }

    .list-item:hover {
        background-color: lightgray; /* Change background color on hover */
    }

    .container {
        display: flex;
    }

    .input-wrapper {
        margin-right: 50px; /* Adjust spacing between input field and table */
    }

    .table-container {
        border-radius: 15px;
        overflow: hidden; /* Ensures rounded corners are visible */
        flex: 1; /* Allow the table container to grow and fill available space */
    }

    .table {
        border-radius: 15px;
        overflow: hidden;
    }

        .table td, .table th {
            border: 1px solid #ededed;
            padding: 8px;
            color: white;
        }

        .table tr:nth-child(even) {
            background-color: #302e2d;
        }

        .table tr {
            background-color: #302e2d;
        }

        .table tr:hover {
                background-color: #423F3E;
        }

        .table th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: #6e6a69;
            color: white;
        }

    .input{
        width: 20%;
        padding: 12px 20px;
        margin: 8px 0;
        display: inline-block;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .textInput{
        border-radius: 15px;
        background-color: #302e2d;
        color: white;
        text-align: center;
    }

    .button {
        display: inline-block;
        padding: 5px 20px 10px;
        font-size: 24px;
        cursor: pointer;
        text-align: center;
        text-decoration: none;
        outline: none;
        color: #fff;
        background-color: #302e2d;
        border: none;
        border-radius: 15px;
        box-shadow: 0 9px #6e6a69;
        margin-top: 15px;
    }

        .button:hover {
            background-color: #423F3E
        }

        .button:active {
            background-color: #423F3E;
            box-shadow: 0 5px #666;
            transform: translateY(4px);
        }

    .popup-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5); /* semi-transparent background */
        z-index: 9999; /* Ensure the popup is above other content */
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .popup {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        z-index: 10000; /* Ensure the popup is above the background */
    }

    .banner {
        background-color: #423F3E;
        color: white;
        font-family: 'Roboto', sans-serif;
        font-size: 2.5em;
        padding: 20px;
        text-align: center;
        border: 2px solid white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
    }

    .separator {
        border-top: 2px solid black;
        margin: 10px 0; /* Adjust the margin as needed */
    }
</style>
