@page "/point"
@using EmergencyResponse.Model
@using EmergencyResponse.ExternalServices
@using EmergencyResponse.ExternalServices.Interfaces
@using EmergencyResponse.Services.DataExport
@using System.Text
@inject IDataforsyningService DataforsyningService
@inject IDataExportService DataExportService
@inject IJSRuntime JS

<PageTitle>Point</PageTitle>

<h1>Point</h1>

@if (address != null)
{
    <p>Address: @address.StreetName @address.HouseNumber, @address.PostalCode @address.PostalCodeName</p>
    <p>Coordinates: Latitude @address.Latitude, Longitude @address.Longitude</p>

    <div>
        <p>Choose a radius to fetch adresses from the address</p>
        <input type="range" min="1" max="20" value="@radius" @oninput="HandleRadiusChange" />
        <p>Selected radius: @radius km</p>
        <button class="btn btn-primary" @onclick="FetchAddresses">Fetch Addresses</button>
    </div>
}
else
{
    <p>Click the button to fetch an address.</p>
    <button class="btn btn-primary" @onclick="FetchAddress">Fetch Address</button>
}

@if (addresses != null && addresses.Count > 0)
{
    <h3>Addresses within @radius km:</h3>
    <ul>
        @foreach (var addr in addresses)
        {
            <li class="address-block">
                @addr.StreetName @addr.HouseNumber,
                @(string.IsNullOrEmpty(addr.Floor) ? "" : addr.Floor)
                @(string.IsNullOrEmpty(addr.Door) ? "" : addr.Door)
                @addr.PostalCode @addr.PostalCodeName 
            </li>
        }
    </ul>
    <div>
        <label for="languageSelect">Select output language:</label>
        <select @onchange="HandleLanguageChange" id="languageSelect">
            <option value="English">English</option>
            <option value="Danish">Danish</option>
        </select>
        <button class="btn btn-primary" @onclick="ExportCSV">Export CSV</button>
    </div>
}
else if (addresses != null)
{
    <p>No addresses found within the specified radius.</p>
}

@code {
    private Address? address;
    private List<Address>? addresses;
    private int radius = 10; // Default radius
    private OutputLanguage selectedLanguage = OutputLanguage.English;

    private async Task FetchAddress()
    {
        // Example address query, replace with dynamic data if needed
        Address queryAddress = new Address("Rødegårdsvej", "98C", "3", "th", "5000", "Odense C");
        address = await DataforsyningService.GetAddressAsync(queryAddress);
    }

    private async Task FetchAddresses()
    {
        addresses = await DataforsyningService.GetAddressesInCircleAsync(address, radius);
    }

    private void HandleRadiusChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newRadius))
        {
            radius = newRadius;
        }
    }

    private void HandleLanguageChange(ChangeEventArgs e)
    {
        if (Enum.TryParse<OutputLanguage>(e.Value?.ToString(), out var language))
        {
            selectedLanguage = language;
        }
    }

    private async Task ExportCSV()
    {
        var csvContent = await DataExportService.ExportAddressesToJson(addresses, selectedLanguage);
        byte[] bytes = Encoding.UTF8.GetBytes(csvContent);
        await JS.InvokeVoidAsync("saveAsFile", "Addresses.csv", Convert.ToBase64String(bytes));
    }
}

<style>
    .address-block {
        border: 1px solid black;
        padding: 10px;
        margin-bottom: 10px;
        background-color: white;
        color: black;
        font-family: Arial, sans-serif;
    }
</style>